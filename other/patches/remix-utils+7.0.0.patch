diff --git a/node_modules/remix-utils/build/common.js b/node_modules/remix-utils/build/common.js
index 6c9c9e9..b24cd0e 100644
--- a/node_modules/remix-utils/build/common.js
+++ b/node_modules/remix-utils/build/common.js
@@ -1 +1 @@
-export * from "./common/promise";
+export * from "./common/promise.js";
diff --git a/node_modules/remix-utils/build/index.d.ts b/node_modules/remix-utils/build/index.d.ts
index b667262..b98bf08 100644
--- a/node_modules/remix-utils/build/index.d.ts
+++ b/node_modules/remix-utils/build/index.d.ts
@@ -1,3 +1,3 @@
-export * from "./common";
-export * from "./react";
-export * from "./server";
+export * from "./common.js";
+export * from "./react.js";
+export * from "./server.js";
diff --git a/node_modules/remix-utils/build/index.js b/node_modules/remix-utils/build/index.js
index b667262..b98bf08 100644
--- a/node_modules/remix-utils/build/index.js
+++ b/node_modules/remix-utils/build/index.js
@@ -1,3 +1,3 @@
-export * from "./common";
-export * from "./react";
-export * from "./server";
+export * from "./common.js";
+export * from "./react.js";
+export * from "./server.js";
diff --git a/node_modules/remix-utils/build/react.d.ts b/node_modules/remix-utils/build/react.d.ts
index 250f9d8..8999764 100644
--- a/node_modules/remix-utils/build/react.d.ts
+++ b/node_modules/remix-utils/build/react.d.ts
@@ -1,15 +1,15 @@
-export * from "./react/cache-assets";
-export * from "./react/client-only";
-export * from "./react/csrf";
-export * from "./react/external-scripts";
-export * from "./react/fetcher-type";
-export * from "./react/honeypot-inputs";
-export * from "./react/matches-type";
-export * from "./react/server-only";
-export * from "./react/use-debounced-fetcher";
-export * from "./react/use-delegated-anchors";
-export * from "./react/use-event-source";
-export * from "./react/use-global-pending-state";
-export * from "./react/use-hydrated";
-export * from "./react/use-locales";
-export * from "./react/use-should-hydrate";
+export * from "./react/cache-assets.js";
+export * from "./react/client-only.js";
+export * from "./react/csrf.js";
+export * from "./react/external-scripts.js";
+export * from "./react/fetcher-type.js";
+export * from "./react/honeypot-inputs.js";
+export * from "./react/matches-type.js";
+export * from "./react/server-only.js";
+export * from "./react/use-debounced-fetcher.js";
+export * from "./react/use-delegated-anchors.js";
+export * from "./react/use-event-source.js";
+export * from "./react/use-global-pending-state.js";
+export * from "./react/use-hydrated.js";
+export * from "./react/use-locales.js";
+export * from "./react/use-should-hydrate.js";
diff --git a/node_modules/remix-utils/build/react.js b/node_modules/remix-utils/build/react.js
index 250f9d8..8999764 100644
--- a/node_modules/remix-utils/build/react.js
+++ b/node_modules/remix-utils/build/react.js
@@ -1,15 +1,15 @@
-export * from "./react/cache-assets";
-export * from "./react/client-only";
-export * from "./react/csrf";
-export * from "./react/external-scripts";
-export * from "./react/fetcher-type";
-export * from "./react/honeypot-inputs";
-export * from "./react/matches-type";
-export * from "./react/server-only";
-export * from "./react/use-debounced-fetcher";
-export * from "./react/use-delegated-anchors";
-export * from "./react/use-event-source";
-export * from "./react/use-global-pending-state";
-export * from "./react/use-hydrated";
-export * from "./react/use-locales";
-export * from "./react/use-should-hydrate";
+export * from "./react/cache-assets.js";
+export * from "./react/client-only.js";
+export * from "./react/csrf.js";
+export * from "./react/external-scripts.js";
+export * from "./react/fetcher-type.js";
+export * from "./react/honeypot-inputs.js";
+export * from "./react/matches-type.js";
+export * from "./react/server-only.js";
+export * from "./react/use-debounced-fetcher.js";
+export * from "./react/use-delegated-anchors.js";
+export * from "./react/use-event-source.js";
+export * from "./react/use-global-pending-state.js";
+export * from "./react/use-hydrated.js";
+export * from "./react/use-locales.js";
+export * from "./react/use-should-hydrate.js";
diff --git a/node_modules/remix-utils/build/react/client-only.js b/node_modules/remix-utils/build/react/client-only.js
index a6bdf86..34e2e0f 100644
--- a/node_modules/remix-utils/build/react/client-only.js
+++ b/node_modules/remix-utils/build/react/client-only.js
@@ -1,5 +1,5 @@
 import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
-import { useHydrated } from "./use-hydrated";
+import { useHydrated } from "./use-hydrated.js";
 /**
  * Render the children only after the JS has loaded client-side. Use an optional
  * fallback component if the JS is not yet loaded.
diff --git a/node_modules/remix-utils/build/react/external-scripts.d.ts b/node_modules/remix-utils/build/react/external-scripts.d.ts
index 3d016c5..5cb38a6 100644
--- a/node_modules/remix-utils/build/react/external-scripts.d.ts
+++ b/node_modules/remix-utils/build/react/external-scripts.d.ts
@@ -1,6 +1,6 @@
 /// <reference types="react" />
 import type { AppData } from "@remix-run/server-runtime";
-import { HandleConventionArguments } from "./handle-conventions";
+import { HandleConventionArguments } from "./handle-conventions.js";
 type ReferrerPolicy =
   | "no-referrer-when-downgrade"
   | "no-referrer"
diff --git a/node_modules/remix-utils/build/react/honeypot-inputs.d.ts b/node_modules/remix-utils/build/react/honeypot-inputs.d.ts
index 60056da..2ebb235 100644
--- a/node_modules/remix-utils/build/react/honeypot-inputs.d.ts
+++ b/node_modules/remix-utils/build/react/honeypot-inputs.d.ts
@@ -1,2 +1,3 @@
 /// <reference types="react" />
 export declare function HoneypotInputs(): JSX.Element;
+export declare function HoneypotProvider(props: {children: React.ReactNode, nameFieldName: string, validFromFieldName: string, encryptedValidFrom: string}): JSX.Element;
diff --git a/node_modules/remix-utils/build/react/honeypot-inputs.js b/node_modules/remix-utils/build/react/honeypot-inputs.js
index a42c3b8..fb47966 100644
--- a/node_modules/remix-utils/build/react/honeypot-inputs.js
+++ b/node_modules/remix-utils/build/react/honeypot-inputs.js
@@ -1,41 +1,47 @@
 import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
-import { useRouteLoaderData } from "@remix-run/react";
+import { createContext, useContext } from "react";
+const HoneyPotContext = createContext(null);
 export function HoneypotInputs() {
-  let rootLoaderData = useRouteLoaderData("root");
-  if (!rootLoaderData) throw new Error("Missing loader data from root");
-  if (!rootLoaderData.nameFieldName) {
-    throw new Error("Missing Honeypot's nameFieldName on root loader data");
-  }
-  if (!rootLoaderData.validFromFieldName) {
-    throw new Error(
-      "Missing Honeypot's validFromFieldName on root loader data",
-    );
-  }
-  if (!rootLoaderData.encryptedValidFrom) {
-    throw new Error(
-      "Missing Honeypot's encryptedValidFrom on root loader data",
-    );
-  }
+  const {nameFieldName, validFromFieldName, encryptedValidFrom} = useContext(HoneyPotContext);
   return _jsxs("div", {
-    id: `${rootLoaderData.nameFieldName}_wrap`,
+    id: `${nameFieldName}_wrap`,
     style: { display: "none" },
     "aria-hidden": "true",
     children: [
+      _jsx("label", {
+        htmlFor: nameFieldName,
+        children: "Please leave this field blank",
+      }),
       _jsx("input", {
-        id: rootLoaderData.nameFieldName,
-        name: rootLoaderData.nameFieldName,
+        id: nameFieldName,
+        name: nameFieldName,
         type: "text",
         defaultValue: "",
         autoComplete: "off",
         tabIndex: -1,
       }),
+      _jsx("label", {
+        htmlFor: validFromFieldName,
+        children: "Please leave this field blank",
+      }),
       _jsx("input", {
-        name: rootLoaderData.validFromFieldName,
+        name: validFromFieldName,
         type: "text",
-        value: rootLoaderData.encryptedValidFrom,
+        value: encryptedValidFrom,
+        readOnly: true,
         autoComplete: "off",
         tabIndex: -1,
       }),
     ],
   });
 }
+export function HoneypotProvider({children, nameFieldName, validFromFieldName, encryptedValidFrom}) {
+  return _jsx(HoneyPotContext.Provider, {
+    value: {
+      nameFieldName,
+      validFromFieldName,
+      encryptedValidFrom,
+    },
+    children: children,
+  });
+}
diff --git a/node_modules/remix-utils/build/react/server-only.js b/node_modules/remix-utils/build/react/server-only.js
index de8dfa7..35dd0a1 100644
--- a/node_modules/remix-utils/build/react/server-only.js
+++ b/node_modules/remix-utils/build/react/server-only.js
@@ -1,5 +1,5 @@
 import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
-import { useHydrated } from "./use-hydrated";
+import { useHydrated } from "./use-hydrated.js";
 /**
  * Render the children only before the JS has loaded client-side. Use an
  * optional fallback component for once the JS has loaded.
diff --git a/node_modules/remix-utils/build/react/use-locales.d.ts b/node_modules/remix-utils/build/react/use-locales.d.ts
index 166536a..c6ba7d1 100644
--- a/node_modules/remix-utils/build/react/use-locales.d.ts
+++ b/node_modules/remix-utils/build/react/use-locales.d.ts
@@ -1,4 +1,4 @@
-import type { Locales } from "../server/get-client-locales";
+import type { Locales } from "../server/get-client-locales.js";
 /**
  * Get the locales returned by the loader of the root route.
  *
diff --git a/node_modules/remix-utils/build/server.d.ts b/node_modules/remix-utils/build/server.d.ts
index ac70b60..db11359 100644
--- a/node_modules/remix-utils/build/server.d.ts
+++ b/node_modules/remix-utils/build/server.d.ts
@@ -1,17 +1,17 @@
-export * from "./server/cors";
-export * from "./server/csrf";
-export * from "./server/event-stream";
-export * from "./server/get-client-ip-address";
-export * from "./server/get-client-locales";
-export * from "./server/honeypot";
-export * from "./server/is-prefetch";
-export * from "./server/named-action";
-export * from "./server/parse-accept-header";
-export * from "./server/preload-route-assets";
-export * from "./server/respond-to";
-export * from "./server/json-hash";
-export * from "./server/responses";
-export * from "./server/rolling-cookie";
-export * from "./server/safe-redirect";
-export * from "./server/typed-cookie";
-export * from "./server/typed-session";
+export * from "./server/cors.js";
+export * from "./server/csrf.js";
+export * from "./server/event-stream.js";
+export * from "./server/get-client-ip-address.js";
+export * from "./server/get-client-locales.js";
+export * from "./server/honeypot.js";
+export * from "./server/is-prefetch.js";
+export * from "./server/named-action.js";
+export * from "./server/parse-accept-header.js";
+export * from "./server/preload-route-assets.js";
+export * from "./server/respond-to.js";
+export * from "./server/json-hash.js";
+export * from "./server/responses.js";
+export * from "./server/rolling-cookie.js";
+export * from "./server/safe-redirect.js";
+export * from "./server/typed-cookie.js";
+export * from "./server/typed-session.js";
diff --git a/node_modules/remix-utils/build/server.js b/node_modules/remix-utils/build/server.js
index ac70b60..db11359 100644
--- a/node_modules/remix-utils/build/server.js
+++ b/node_modules/remix-utils/build/server.js
@@ -1,17 +1,17 @@
-export * from "./server/cors";
-export * from "./server/csrf";
-export * from "./server/event-stream";
-export * from "./server/get-client-ip-address";
-export * from "./server/get-client-locales";
-export * from "./server/honeypot";
-export * from "./server/is-prefetch";
-export * from "./server/named-action";
-export * from "./server/parse-accept-header";
-export * from "./server/preload-route-assets";
-export * from "./server/respond-to";
-export * from "./server/json-hash";
-export * from "./server/responses";
-export * from "./server/rolling-cookie";
-export * from "./server/safe-redirect";
-export * from "./server/typed-cookie";
-export * from "./server/typed-session";
+export * from "./server/cors.js";
+export * from "./server/csrf.js";
+export * from "./server/event-stream.js";
+export * from "./server/get-client-ip-address.js";
+export * from "./server/get-client-locales.js";
+export * from "./server/honeypot.js";
+export * from "./server/is-prefetch.js";
+export * from "./server/named-action.js";
+export * from "./server/parse-accept-header.js";
+export * from "./server/preload-route-assets.js";
+export * from "./server/respond-to.js";
+export * from "./server/json-hash.js";
+export * from "./server/responses.js";
+export * from "./server/rolling-cookie.js";
+export * from "./server/safe-redirect.js";
+export * from "./server/typed-cookie.js";
+export * from "./server/typed-session.js";
diff --git a/node_modules/remix-utils/build/server/get-client-ip-address.js b/node_modules/remix-utils/build/server/get-client-ip-address.js
index 72dfc3e..0dd8d89 100644
--- a/node_modules/remix-utils/build/server/get-client-ip-address.js
+++ b/node_modules/remix-utils/build/server/get-client-ip-address.js
@@ -1,5 +1,5 @@
 import isIP from "is-ip";
-import { getHeaders } from "./get-headers";
+import { getHeaders } from "./get-headers.js";
 /**
  * This is the list of headers, in order of preference, that will be used to
  * determine the client's IP address.
diff --git a/node_modules/remix-utils/build/server/get-client-locales.js b/node_modules/remix-utils/build/server/get-client-locales.js
index 0f26b08..e6e0d8f 100644
--- a/node_modules/remix-utils/build/server/get-client-locales.js
+++ b/node_modules/remix-utils/build/server/get-client-locales.js
@@ -1,5 +1,5 @@
 import { parseAcceptLanguage } from "intl-parse-accept-language";
-import { getHeaders } from "./get-headers";
+import { getHeaders } from "./get-headers.js";
 export function getClientLocales(requestOrHeaders) {
   let headers = getHeaders(requestOrHeaders);
   let acceptLanguage = headers.get("Accept-Language");
diff --git a/node_modules/remix-utils/build/server/honeypot.d.ts b/node_modules/remix-utils/build/server/honeypot.d.ts
index 0032819..3ea0268 100644
--- a/node_modules/remix-utils/build/server/honeypot.d.ts
+++ b/node_modules/remix-utils/build/server/honeypot.d.ts
@@ -7,7 +7,6 @@ export interface HonetpotConfig {
   randomizeNameFieldName?: boolean;
   nameFieldName?: string;
   validFromFieldName?: string;
-  validFromTimestamp?: number;
   encryptionSeed?: string;
 }
 export declare class SpamError extends Error {}
@@ -15,11 +14,10 @@ export declare class Honeypot {
   protected config: HonetpotConfig;
   private generatedEncryptionSeed;
   constructor(config?: HonetpotConfig);
-  getInputProps(): HoneypotInputProps;
+  getInputProps(config?: {validFromTimestamp?: Date}): HoneypotInputProps;
   check(formData: FormData): void;
   protected get nameFieldName(): string;
   protected get validFromFieldName(): string;
-  protected get validFromTimestamp(): number;
   protected get encryptionSeed(): string;
   protected getRandomizedNameFieldName(
     nameFieldName: string,
diff --git a/node_modules/remix-utils/build/server/honeypot.js b/node_modules/remix-utils/build/server/honeypot.js
index 65586c9..fb77a74 100644
--- a/node_modules/remix-utils/build/server/honeypot.js
+++ b/node_modules/remix-utils/build/server/honeypot.js
@@ -5,11 +5,11 @@ export class Honeypot {
     this.config = config;
     this.generatedEncryptionSeed = this.randomValue();
   }
-  getInputProps() {
+  getInputProps({validFromTimestamp = new Date()} = {}) {
     return {
       nameFieldName: this.nameFieldName,
       validFromFieldName: this.validFromFieldName,
-      encryptedValidFrom: this.encrypt(this.validFromTimestamp.toString()),
+      encryptedValidFrom: this.encrypt(validFromTimestamp.toString()),
     };
   }
   check(formData) {
@@ -17,7 +17,7 @@ export class Honeypot {
     let nameFieldName =
       (_a = this.config.nameFieldName) !== null && _a !== void 0
         ? _a
-        : "honeypot";
+        : "name__confirm";
     if (this.config.randomizeNameFieldName) {
       let actualName = this.getRandomizedNameFieldName(nameFieldName, formData);
       if (actualName) nameFieldName = actualName;
@@ -45,7 +45,7 @@ export class Honeypot {
     let fieldName =
       (_a = this.config.nameFieldName) !== null && _a !== void 0
         ? _a
-        : "honeypot";
+        : "name__confirm";
     if (!this.config.randomizeNameFieldName) return fieldName;
     return `${fieldName}_${this.randomValue()}`;
   }
@@ -53,13 +53,7 @@ export class Honeypot {
     var _a;
     return (_a = this.config.validFromFieldName) !== null && _a !== void 0
       ? _a
-      : "honeypot_from";
-  }
-  get validFromTimestamp() {
-    var _a;
-    return (_a = this.config.validFromTimestamp) !== null && _a !== void 0
-      ? _a
-      : Date.now();
+      : "from__confirm";
   }
   get encryptionSeed() {
     var _a;
diff --git a/node_modules/remix-utils/build/server/is-prefetch.js b/node_modules/remix-utils/build/server/is-prefetch.js
index fe0d820..93362ff 100644
--- a/node_modules/remix-utils/build/server/is-prefetch.js
+++ b/node_modules/remix-utils/build/server/is-prefetch.js
@@ -1,4 +1,4 @@
-import { getHeaders } from "./get-headers";
+import { getHeaders } from "./get-headers.js";
 export function isPrefetch(requestOrHeaders) {
   let headers = getHeaders(requestOrHeaders);
   let purpose =
diff --git a/node_modules/remix-utils/build/server/respond-to.js b/node_modules/remix-utils/build/server/respond-to.js
index bc8fc5e..296f90a 100644
--- a/node_modules/remix-utils/build/server/respond-to.js
+++ b/node_modules/remix-utils/build/server/respond-to.js
@@ -1,5 +1,5 @@
-import { getHeaders } from "./get-headers";
-import { parseAcceptHeader } from "./parse-accept-header";
+import { getHeaders } from "./get-headers.js";
+import { parseAcceptHeader } from "./parse-accept-header.js";
 export function respondTo(requestOrHeaders, handlers) {
   let headers = getHeaders(requestOrHeaders);
   let accept = headers.get("accept");
diff --git a/node_modules/remix-utils/build/server/rolling-cookie.d.ts b/node_modules/remix-utils/build/server/rolling-cookie.d.ts
index 8bbc7e1..5e3b9f8 100644
--- a/node_modules/remix-utils/build/server/rolling-cookie.d.ts
+++ b/node_modules/remix-utils/build/server/rolling-cookie.d.ts
@@ -1,6 +1,6 @@
 import type { Cookie } from "@remix-run/server-runtime";
 import { z } from "zod";
-import { TypedCookie } from "./typed-cookie";
+import { TypedCookie } from "./typed-cookie.js";
 export declare function rollingCookie<Schema extends z.ZodTypeAny>(
   cookie: Cookie | TypedCookie<Schema>,
   request: Request,
